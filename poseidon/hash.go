// Copyright Â© 2019 Weald Technology Trading
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package poseidon provides hashing using the Poseidon system.
package poseidon

import (
	"github.com/iden3/go-iden3-crypto/poseidon"
)

const _hashlength = 32

// Poseidon is the Poseidon hashing method.
type Poseidon struct{}

// New creates a new Poseidon hashing method with `frameSize` set to 16.
func New() *Poseidon {
	return &Poseidon{}
}

// Hash generates a Poseidon hash from a byte array.
func (ph *Poseidon) Hash(data ...[]byte) []byte {
	var hash []byte
	if len(data) == 1 {
		hash = poseidon.Sum(data[0])
	} else {
		concatDataLen := 0
		for _, d := range data {
			concatDataLen += len(d)
		}
		concatData := make([]byte, concatDataLen)
		curOffset := 0
		for _, d := range data {
			copy(concatData[curOffset:], d)
			curOffset += len(d)
		}
		hash = poseidon.Sum(concatData)
	}

	return hash
}

// HashLength returns the length of hashes generated by Hash() in bytes.
func (ph *Poseidon) HashLength() int {
	return _hashlength
}

// HashName returns the name of this hash.
func (ph *Poseidon) HashName() string {
	return "poseidon"
}
