// Copyright Â© 2019 Weald Technology Trading
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package blake3 provides hashing using the BLAKE3 system.
package blake3

import (
	"github.com/zeebo/blake3"
)

const _512hashlength = 64

// BLAKE3_512 is the Blake3 hashing method with 512 bits.
type BLAKE3_512 struct{}

// New512 creates a new Blake3 hashing method.
func New512() *BLAKE3_512 {
	return &BLAKE3_512{}
}

// HashLength returns the length of hashes generated by Hash() in bytes.
func (*BLAKE3_512) HashLength() int {
	return _512hashlength
}

// HashName returns the name of this hash.
func (*BLAKE3_512) HashName() string {
	return "blake3-512"
}

// Hash generates a BLAKE2b hash from input byte arrays.
func (*BLAKE3_512) Hash(data ...[]byte) []byte {
	var hash [_512hashlength]byte
	if len(data) == 1 {
		hash = blake3.Sum512(data[0])
	} else {
		concatDataLen := 0
		for _, d := range data {
			concatDataLen += len(d)
		}
		concatData := make([]byte, concatDataLen)
		curOffset := 0
		for _, d := range data {
			copy(concatData[curOffset:], d)
			curOffset += len(d)
		}
		hash = blake3.Sum512(concatData)
	}

	return hash[:]
}
